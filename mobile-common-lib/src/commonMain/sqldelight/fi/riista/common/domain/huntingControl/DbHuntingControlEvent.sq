CREATE TABLE DbHuntingControlEvent (
    local_id INTEGER PRIMARY KEY AUTOINCREMENT,
    remote_id INTEGER,
    spec_version INTEGER AS Int NOT NULL,
    rev INTEGER AS Int,
    mobile_client_ref_id INTEGER,
    username TEXT NOT NULL,
    rhy_id INTEGER NOT NULL,
    event_type TEXT NOT NULL,
    status TEXT NOT NULL,
    cooperation_types TEXT NOT NULL,
    date TEXT NOT NULL CHECK(date IS strftime('%Y-%m-%d', date)),
    start_time TEXT NOT NULL CHECK(start_time IS strftime('%H:%M', start_time)),
    end_time TEXT NOT NULL CHECK(end_time IS strftime('%H:%M', end_time)),
    wolf_territory INTEGER AS Boolean NOT NULL DEFAULT 0,
    description TEXT,
    location_description TEXT,
    proof_order_count INTEGER AS Int NOT NULL DEFAULT 0,
    customer_count INTEGER AS Int NOT NULL DEFAULT 0,
    other_participants TEXT,
    can_edit INTEGER AS Boolean NOT NULL DEFAULT 0,
    modified INTEGER AS Boolean NOT NULL DEFAULT 0,

    -- GeoLocation
    latitude INTEGER AS Int NOT NULL,
    longitude INTEGER AS Int NOT NULL,
    source TEXT NOT NULL,
    accuracy REAL,
    altitude REAL,
    altitudeAccuracy REAL,

    CONSTRAINT fk_hunting_control_event_rhy
        FOREIGN KEY (rhy_id, username)
        REFERENCES DbHuntingControlRhy (remote_id, username)
        ON DELETE CASCADE,
    CONSTRAINT hunting_control_event_remote_id_unique UNIQUE(username, remote_id)
);

eventExists:
SELECT EXISTS(SELECT 1 FROM DbHuntingControlEvent WHERE remote_id = ? AND username = ?);

getEventRevision:
SELECT rev FROM DbHuntingControlEvent WHERE remote_id = ? AND username = ?;

selectByRhy:
SELECT * FROM DbHuntingControlEvent WHERE rhy_id = ? AND username = ? ORDER BY date DESC, start_time DESC;

getLocalIdByUsernameAndRemoteId:
SELECT local_id FROM DbHuntingControlEvent WHERE username = ? AND remote_id = ?;

selectModifiedEventsByUsername:
SELECT * FROM DbHuntingControlEvent WHERE username = ? AND modified = 1;

selectModifiedEventsByUsernameAndRhy:
SELECT * FROM DbHuntingControlEvent WHERE username = ? AND rhy_id = ? AND modified = 1;

insert:
INSERT INTO DbHuntingControlEvent (remote_id, spec_version, rev, mobile_client_ref_id, username, rhy_id, event_type, status, cooperation_types, date, start_time, end_time, wolf_territory, description, location_description, proof_order_count, customer_count, other_participants, can_edit, modified, latitude, longitude, source, accuracy, altitude, altitudeAccuracy)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

lastInsertRowId:
SELECT last_insert_rowid();

selectByLocalId:
SELECT * FROM DbHuntingControlEvent WHERE local_id = ?;

updateByLocalId:
UPDATE DbHuntingControlEvent SET
    spec_version=?,
    remote_id=?,
    rev=?,
    event_type=?,
    status=?,
    cooperation_types=?,
    date=?,
    start_time=?,
    end_time=?,
    wolf_territory=?,
    description=?,
    location_description=?,
    proof_order_count=?,
    customer_count=?,
    other_participants=?,
    can_edit=?,
    modified=?,
    latitude=?,
    longitude=?,
    source=?,
    accuracy=?,
    altitude=?,
    altitudeAccuracy=?
WHERE local_id = ?;

updateByRemoteId:
UPDATE DbHuntingControlEvent SET
    spec_version=?,
    rev=?,
    event_type=?,
    status=?,
    cooperation_types=?,
    date=?,
    start_time=?,
    end_time=?,
    wolf_territory=?,
    description=?,
    location_description=?,
    proof_order_count=?,
    customer_count=?,
    other_participants=?,
    can_edit=?,
    modified=?,
    latitude=?,
    longitude=?,
    source=?,
    accuracy=?,
    altitude=?,
    altitudeAccuracy=?
WHERE remote_id = ?;
